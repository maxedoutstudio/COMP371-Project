#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;  // You will need this when you do lighting
//layout(location = 2) in vec4 vertexColor;
layout(location = 2) in vec2 vertexUV;


// Uniform Inputs
uniform mat4 WorldTransform;
uniform mat4 ViewTransform;
uniform mat4 ProjectionTransform;

// light position
uniform vec4 WorldLightPosition; // if w = 1: Point light, if w = 0: directional light

// Outputs to fragment shader
out vec4 v_color;
out vec2 UV;

out vec3 normal;          // Transformed normal in View Space
out vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
out vec4 lightVector;     // Vector from the vertex to the Light in View Space
						  // Length of lightVector is the distance between light and vertex





void main()
{
	mat4 MV = ViewTransform * WorldTransform;
	mat4 MVP = ProjectionTransform * MV;
	
	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	
	v_color = vec4(1.0f);
	UV = vertexUV;
	
	
	// Prepare Data for Fragment Shader
	// Should the normal be transformed?
	//mat4 normMat4 = transpose(inverse(WorldTransform));
	normal = transpose(inverse(mat3(MV))) * vertexNormal_modelspace;//normMat4 * vec4(vertexNormal_modelspace,0);
	normal = normalize(normal);
	//normal = vec3(normal4[0],normal4[1],normal4[2]);
	//vec4 camera_Position4 = MV * vec4(0,0,0,1);
	//vec3 camera_Position = -vec3(camera_Position4.x,camera_Position4.y,camera_Position4.z);
	//vec3 camera_Position = vec3(MV[0][3],MV[1][3],MV[2][3]);
	vec4 vertex_Position4 = MV * vec4(vertexPosition_modelspace,1.0);
	vec3 vertex_Position = vertex_Position4.xyz;
	eyeVector = - vertex_Position;//camera_Position 
	vec4 light4 =  ViewTransform * WorldLightPosition;
	vec3 light3 = light4.xyz; //vec3(WorldLightPosition.x, WorldLightPosition.y, WorldLightPosition.z);
	if(WorldLightPosition.w > 0.5){
	vec3 lVec3 =  light3 - vertex_Position;// vertex_Position - light3 ;
	lightVector = vec4(lVec3, WorldLightPosition.w) ; 
	}else{
	lightVector = light4 ; 
	}
}

